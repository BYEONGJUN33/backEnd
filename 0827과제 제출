package boot.start.servlet;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

@WebServlet("/user") // 여기가 클래스 매핑 -> 클라이언트가 경로 요청을 보내면 이 클래스를 실행하라는 명령
public class UserServlet extends HttpServlet {
// 클래스 선언 뒤에 클래스를 상속받아 쓴다, HTTP 요청을 처리하는 데 필요한 기본 기능을 제공해줌.

    // 서버가 켜져 있는 동안만 유지되는 임시 저장소 (DB 대신 사용)
    private static final Map<String, String> userStore = new HashMap<>();

    @Override
    //클라이언트가 POST 요청을 보냈을때 호출되는 메서드, req 데이터를 읽고, 응답 resp을 보낸다는 메서드
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // 1. 요청 파라미터 한글 깨짐 방지
        req.setCharacterEncoding("UTF-8");

        // 2. 요청 파라미터 꺼내기 (폼 name과 동일해야 함)
        String username = req.getParameter("username"); // req에서 username이라는 파라미터 값을 꺼내온다.
        String password = req.getParameter("password"); // 위와 동일하게 password 꺼내오기
        String email = req.getParameter("email"); // 이메일은 받기만 하고 저장은 생략

        // 3. 응답에 대한 기본 설정 (콘텐츠 타입, 한글 인코딩)
        resp.setContentType("text/plain; charset=UTF-8");
        PrintWriter out = resp.getWriter();
        // 이건 몰라도 될 거 같고

        // 4. 아이디 중복 체크
        if (userStore.containsKey(username)) {
            resp.setStatus(HttpServletResponse.SC_CONFLICT); // 409 Conflict
            out.println("이미 존재하는 아이디입니다: " + username);
            return;
        }

        // 5. 파라미터 저장
        userStore.put(username, password); // email 제외하고 (key, value)로 HashMap에 저장해줌 18번째 줄 HashMap 정의 됨.

        // 6. 성공 응답
        resp.setStatus(HttpServletResponse.SC_CREATED); // 201 Created // 응답 상태코드를 설정
        out.println("회원가입 완료: " + username); // 응답에 메세지를 담아서 클라이언트에게 보냄
    }


    // UserServlet.java 파일의 doGet() 메서드 내용입니다.
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        req.setCharacterEncoding("UTF-8");
        resp.setContentType("text/plain; charset=UTF-8");
        PrintWriter out = resp.getWriter();

        String username = req.getParameter("username");
        String password = req.getParameter("password");

        // HashMap에 저장된 데이터와 비교
        if (userStore.containsKey(username) && userStore.get(username).equals(password)) {
            resp.setStatus(HttpServletResponse.SC_OK); // 200 OK
            out.println("로그인 성공! 사용자: " + username);
        } else {
            resp.setStatus(HttpServletResponse.SC_UNAUTHORIZED); // 401 Unauthorized
            out.println("로그인 실패! 아이디 또는 비밀번호를 확인하세요.");
        }
    }
}

// 파라미터 => 클라이언트가 서버로 보내는 데이터 묶음
// URL 뒤에 ?와 함께 키=값 형태로 보낸다고 함
//                    ㄴ ( /user?username=aaa )

//서블릿의 동적 처리로 사용자가 보낸 데이터에 따라 다른 응답 가능.

//HashMap 키와 값을 짝지어 저장하는 방식
//키는 고유 but 값은 중복 가능
// 이를 통해 키만 알면 해당 값을 빠르게 찾을 수 있음, username으로 그에 맞는 password를 찾아 비교해봄.
