package Step1;

public class Fibonacci {
    public static int fibonacci(int n) { // 여기가 시그니처구나
        //0번째/1번째는 직접 리턴해야함 이전 더할 값이 없기에.
        if(n == 0) return 0;
        if(n == 1) return 1;

        //그 외에는 재귀메소드로 이 전 값을 더해서 리턴값 받기
        return fibonacci(n-1) + fibonacci(n-2);

        //피보나치 수열 만듦
    }

    public static void main(String[] args) {
        int num = 12; //8번째 피보나치
        System.out.println(num + "번째 피보나치 수열 값은 : " + fibonacci(num));
    }


}


//피보나치 수열이란 0 1 1 2 3 5 8 13 21 처럼    34 55 89 144
// 앞 두 수를 더해 다음 수를 만드는 수열 인덱스 시작값은 0부터 세는 것 주의
// m번째 = (n - 1) + (n - 2)
//8번째는 7번째 + 6번째인데  13 + 8


//재귀란?
//함수(메소드)가 자기 자신을 다시 호출하는 것 |||||  큰 문제 -> 작은 문제로 쪼개서 풀기
// 피보나치처럼 이전 + 그 전 단계 구조에 잘 맞는다
//기본 종료 조건(0일때, 1일때 값 지정)이 없으면 무한 호출 되어 에러 발생

//스택 구조로 LIFO니까
//현재 0번째는 0이고 1번째는 1인 시작값을 알고 있다.
// 재귀는 n에서 계속 내려가 기본 시작값을 만나면 멈추고 그 값을 위로 다시 전달하기 시작함
// 값이 이때 거꾸로 합쳐지면서 올라오니 스택구조라 하는 것.

//함수가 “모르는 것을 직접 계산하는 게 아니라, 구하는 과정을 반복 호출” 한다고 생각